[{"/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/index.tsx":"1","/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/plugins/fetch-plugin.ts":"2","/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/plugins/unpkg-path-plugin.tsx":"3","/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/components/code-editor.tsx":"4","/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/components/preview.tsx":"5","/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/bundler/index.ts":"6"},{"size":765,"mtime":1680465514391,"results":"7","hashOfConfig":"8"},{"size":1795,"mtime":1678308251871,"results":"9","hashOfConfig":"8"},{"size":822,"mtime":1678305782015,"results":"10","hashOfConfig":"8"},{"size":1867,"mtime":1680464259240,"results":"11","hashOfConfig":"8"},{"size":919,"mtime":1680464970101,"results":"12","hashOfConfig":"8"},{"size":699,"mtime":1680465448027,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vemv5f",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/index.tsx",[],"/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/plugins/fetch-plugin.ts",[],["28","29"],"/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/plugins/unpkg-path-plugin.tsx",[],"/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/components/code-editor.tsx",["30"],"import './code-editor.css';\nimport { useRef } from 'react';\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport { editor } from 'monaco-editor';\n\n\ninterface CodeEditorProps {\n  initialValue: string;\n  onChange(value: string): void;\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n  const editorRef = useRef<any>();\n  \n  const onEditorDidMount: EditorDidMount = (getValue, monacoEditor) => {\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n\n    monacoEditor.getModel()?.updateOptions({ tabSize: 2 });\n  };\n\n  const onFormatClick = () => {\n    if (editorRef) {\n      // get current value from editor\n    const unformatted = editorRef.current.getModel().getValue();\n\n    // format that value\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, '');\n\n    // set the formatted value back in the editor\n    editorRef.current.setValue(formatted);\n    }\n  };\n  \n  return(\n    <div className='editor-wrapper'>\n      <button\n        className='button button-format is-primary is-small'\n        onClick={onFormatClick}>Format</button>\n      <MonacoEditor\n      editorDidMount={onEditorDidMount}\n      value={initialValue}\n      theme='dark'\n      language='javascript'\n      height={500}\n      options={\n        {\n          wordWrap: 'on',\n          minimap: { enabled: false },\n          showUnused: false,\n          folding: false,\n          lineNumbersMinChars: 3,\n          fontSize: 16,\n          scrollBeyondLastLine: false,\n          automaticLayout: true\n        }\n      }\n    />\n  </div>\n  );\n};\n\nexport default CodeEditor;","/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/components/preview.tsx",[],"/home/jawdat/Documents/dev/course/udemy/React-and-Typescript/jbook/src/bundler/index.ts",["31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":6,"column":10,"nodeType":"38","messageId":"39","endLine":6,"endColumn":16},{"ruleId":"40","severity":1,"message":"41","line":7,"column":1,"nodeType":"42","endLine":27,"endColumn":3},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"@typescript-eslint/no-unused-vars","'editor' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]